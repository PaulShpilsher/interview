- Add method GetAddressesByCountry that takes a country string as a parameter and returns a List<Address> of matching addresses (case-insensitive) in the context using LINQ, or an empty List if none found
    Did this online.
    Additions:
    Fixed case insensitivity (missed that one from online coding)
    Changed to be asynchronous
    
    TIME: negligeable

- Add method GetCustomerByFirstAndLastName that takes a first and last name string as parameters and returns a single Customer or null if none found using LINQ
- Add method GetCustomerById that takes a Guid and returns a single Customer or null if none found using LINQ
    Done online
    Additions:
    Changed to be asynchronous

    TIME: negligeable

- Create a CustomerFactory that creates a Controllers.Responses.Address and Controllers.Responses.Customer from the Models.Address and Models.Customer objects

    TIME: 7 minutes

- Create a CustomerService class that uses the CustomerRepository and CustomerFactory that were created and registered in DI with the following methods:
  GetAddressesByCountry(string countryName) -> return List<Controllers.Responses.Address>
  GetCustomerByFirstAndLastName(string firstName, string lastName) -> return Controllers.Responses.Customer

    During this task setup DI for repositories, factory, service and controller

    TIME: 25
